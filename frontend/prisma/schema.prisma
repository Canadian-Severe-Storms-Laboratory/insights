datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client_frontend {
  provider = "prisma-client-js"
}

generator client_backend {
  provider = "prisma-client-js"
  output   = "../../backend/node_modules/.prisma/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  ntpAuthenticated Boolean?  @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  searches_created Search[]  @relation("Created By")
  searches_updated Search[]  @relation("Updated By")
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Search {
  id            String   @id @default(cuid())
  name          String
  location      String
  province      String?
  start_date    DateTime
  end_date      DateTime
  keywords      String[]
  frequency     Float    @default(30)
  max_results   Int      @default(50)
  facebook      Boolean  @default(false)
  twitter       Boolean  @default(true)
  enabled       Boolean  @default(true)
  archived      Boolean  @default(false)
  posts         Post[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by    User     @relation("Created By", fields: [created_by_id], references: [id])
  created_by_id String
  updated_by    User     @relation("Updated By", fields: [updated_by_id], references: [id])
  updated_by_id String
}

model Post {
  id          String    @id @default(cuid())
  score       Float?
  source_type String
  source_id   String    @unique
  url         String
  content     String?
  found_at    DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  created_at  DateTime?
  author      String
  location    String
  images      String[]
  videos      String[]
  likes       Int?
  shares      Int?
  comments    Int?
  raw         Json?
  search_id   String
  search      Search    @relation(fields: [search_id], references: [id])
}
