datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client_frontend {
  provider = "prisma-client-js"
}

generator client_backend {
  provider = "prisma-client-js"
  output   = "../../backend/node_modules/.prisma/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  ntpAuthenticated Boolean?  @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  searches_created Search[]  @relation("Search Created By")
  searches_updated Search[]  @relation("Search Updated By")
  paths_created    Path[]    @relation("Path Created By")
  paths_updated    Path[]    @relation("Path Updated By")
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Search {
  id                String    @id @default(cuid())
  name              String
  location          Json?
  location_keywords String[]
  province          String?
  start_date        DateTime
  end_date          DateTime
  keywords          String[]
  frequency         Float     @default(30)
  max_results       Int       @default(50)
  facebook          Boolean   @default(false)
  twitter           Boolean   @default(true)
  enabled           Boolean   @default(true)
  archived          Boolean   @default(false)
  posts             Post[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_run          DateTime?
  last_run_time     Float?
  tweet_count       Int[]
  created_by        User      @relation("Search Created By", fields: [created_by_id], references: [id])
  created_by_id     String
  updated_by        User      @relation("Search Updated By", fields: [updated_by_id], references: [id])
  updated_by_id     String
}

model Post {
  id          String    @id @default(cuid())
  score       Float?
  source_type String
  source_id   String    @unique
  url         String
  content     String?
  found_at    DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  created_at  DateTime?
  author      String
  location    String
  images      String[]
  videos      String[]
  likes       Int?
  shares      Int?
  comments    Int?
  raw         Json?
  search      Search    @relation(fields: [search_id], references: [id])
  search_id   String
}

model Path {
  id            String     @id @unique @default(cuid())
  images        Image360[] @relation("Path Images")
  name          String
  date          DateTime
  created_at    DateTime
  updated_at    DateTime
  created_by    User       @relation("Path Created By", fields: [created_by_id], references: [id])
  created_by_id String
  updated_by    User       @relation("Path Updated By", fields: [updated_by_id], references: [id])
  updated_by_id String
}

model Image360 {
  id         String      @id @unique @default(cuid())
  source     ImageSource @default(NTP)
  path       Path        @relation("Path Images", fields: [path_id], references: [id])
  path_id    String
  index      Int
  image_url  String
  image_size BigInt
  date_taken DateTime?
  lng        Float
  lat        Float
  altitude   Float?
  distance   Float?
  heading    Float?
  pitch      Float?
  roll       Float?
  track      Float?

  // Before image is usually the Google Street View image
  before_id String?   @unique
  before    Image360? @relation("Image360 History", fields: [before_id], references: [id])

  // After is used for Google Street View images to view the NTP image
  // Since Google Street View images can have multiple NTP images, we use a list
  after Image360[] @relation("Image360 History")
}

enum ImageSource {
  GOOGLE
  NTP
}
