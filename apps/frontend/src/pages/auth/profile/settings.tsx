import { AuthenticateUsersTable } from '@/components/authenticate-users-table';
import Header from '@/components/header';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import {
	Card,
	CardContent,
	CardDescription,
	CardFooter,
	CardHeader,
	CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Skeleton } from '@/components/ui/skeleton';
import { Toaster } from '@/components/ui/toaster';
import { useToast } from '@/components/ui/use-toast';
import { authOptions } from '@/server/auth';
import { api } from '@/utils/api';
import { LucideUser } from 'lucide-react';
import { type GetServerSidePropsContext } from 'next';
import { getServerSession } from 'next-auth';
import { useSession } from 'next-auth/react';
import Head from 'next/head';
import { useState, type FormEvent } from 'react';
import { type SubmitHandler, useForm } from 'react-hook-form';

type InformationInputs = {
	name: string;
};

type PictureInputs = {
	image: string;
};

export default function Settings() {
	const session = useSession();
	const updateUser = api.users.update.useMutation();
	const toaster = useToast();

	const [image, setImage] = useState<string | null>(
		session.data?.user.image ?? null
	);

	const {
		register: registerInformation,
		handleSubmit: handleSubmitInformation,
	} = useForm<InformationInputs>({
		defaultValues: {
			name: session.data?.user.name ?? '',
		},
	});

	const { register: registerPicture, handleSubmit: handleSubmitPicture } =
		useForm<PictureInputs>({
			defaultValues: {
				image: session.data?.user.image ?? '',
			},
		});

	const saveInformation = (event: FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		void handleSubmitInformation((async (data) => {
			const result = await updateUser.mutateAsync({
				id: session.data?.user.id ?? '',
				name: data.name,
			});

			if (result) {
				toaster.toast({
					title: 'Information updated',
					description: 'Your information has been updated.',
					duration: 3000,
				});
				await session.update();
			}
		}) as SubmitHandler<InformationInputs>)(event);
	};

	const savePicture = (event: FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		void handleSubmitPicture((async (data) => {
			const result = await updateUser.mutateAsync({
				id: session.data?.user.id ?? '',
				image: data.image,
			});

			if (result) {
				setImage(result.image);
				toaster.toast({
					title: 'Image updated',
					description: 'Your image has been updated.',
					duration: 3000,
				});
				await session.update();
			}
		}) as SubmitHandler<PictureInputs>)(event);
	};

	return (
		<>
			<Head>
				<title>Settings</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="h-screen">
				<Header title="Settings" session={session.data} />
				<Toaster />
				<div className="container flex flex-col gap-4 p-6">
					<form onSubmit={saveInformation}>
						<Card>
							<CardHeader>
								<CardTitle>Your information</CardTitle>
								<CardDescription>
									This information will be used to identify you on this site.
								</CardDescription>
							</CardHeader>
							<CardContent>
								<Label>Name</Label>
								{!session.data ? (
									<Skeleton className="mt-2 h-10 w-full" />
								) : (
									<Input
										type="text"
										className="mb-4 mt-2"
										placeholder="Name"
										{...registerInformation('name', {
											validate: (value) => value.trim().length > 0,
										})}
									/>
								)}
								<Label>Email</Label>
								{!session.data ? (
									<Skeleton className="mt-2 h-10 w-full" />
								) : (
									<Input
										type="email"
										className="mt-2"
										value={session.data?.user.email ?? ''}
										disabled
									/>
								)}
							</CardContent>
							<CardFooter>
								<Button type="submit">Save</Button>
							</CardFooter>
						</Card>
					</form>
					<form onSubmit={savePicture}>
						<Card>
							<CardHeader>
								<CardTitle>Your picture</CardTitle>
								<CardDescription>
									This picture is for customization purposes only.
								</CardDescription>
							</CardHeader>
							<CardContent>
								<Label>Image</Label>
								<div className="mt-2 flex flex-row items-center gap-4">
									<Avatar className="h-12 w-12">
										<AvatarImage src={image || ''} alt="Profile picture" />
										<AvatarFallback>
											<LucideUser />
										</AvatarFallback>
									</Avatar>
									{!session.data ? (
										<Skeleton className="mt-2 h-10 w-full" />
									) : (
										<Input
											type="url"
											id="image"
											placeholder="Image"
											{...registerPicture('image')}
										/>
									)}
								</div>
							</CardContent>
							<CardFooter>
								<Button type="submit">Save</Button>
							</CardFooter>
						</Card>
					</form>
					{session.data?.user.ntpAuthenticated && (
						<Card>
							<CardHeader>
								<CardTitle>Authenticate Users</CardTitle>
								<CardDescription>
									Authenticate users to allow them to use the site.
								</CardDescription>
							</CardHeader>
							<CardContent>
								<AuthenticateUsersTable />
							</CardContent>
						</Card>
					)}
				</div>
			</main>
		</>
	);
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const session = await getServerSession(context.req, context.res, authOptions);

	if (!session) {
		return {
			redirect: {
				destination: '/',
				permanent: false,
			},
		};
	}

	return {
		props: {
			session,
		},
	};
}
