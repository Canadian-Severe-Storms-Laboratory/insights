import { type FormEvent } from 'react';
import { type GetServerSidePropsContext } from 'next';
import { type SearchData } from '@/utils/types/searchData';
import { type DateRange } from 'react-day-picker';
import Head from 'next/head';
import Header from '@/components/header';
import ServerStatusBadge from '@/components/server-status-badge';
import { CalendarDateRangePicker } from '@/components/ui/calendar-range';
import { MapWithMarkerCard } from '@/components/map';
import { Controller, useForm } from 'react-hook-form';
import 'mapbox-gl/dist/mapbox-gl.css';
import {
	Card,
	CardContent,
	CardDescription,
	CardFooter,
	CardHeader,
	CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Input } from '@/components/ui/input';
import { addDays } from 'date-fns';
import mapboxgl from 'mapbox-gl';
import { Toaster } from '@/components/ui/toaster';
import { toast } from '@/components/ui/use-toast';
import { api } from '@/utils/api';
import { useRouter } from 'next/router';
import { KeywordInput } from '@/components/input/keyword-input';
import { KeywordsInfo, RadiusInfo } from '@/components/dialogs/info-dialogs';
import { useWebSocketContext } from '@/components/socket-context';
import { ntpProtectedRoute } from '@/lib/protectedRoute';
import { useSession } from 'next-auth/react';
import { Toggle } from '@/components/ui/toggle';
import { LucideFacebook, LucideTwitter } from 'lucide-react';

const NewSearchPage = () => {
	const session = useSession();
	const router = useRouter();
	const search = api.search.new.useMutation();
	const { register, handleSubmit, control, formState } = useForm<SearchData>();
	const websocketInstance = useWebSocketContext();

	const onSubmit = (event: FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		void handleSubmit(async (data) => {
			if (websocketInstance.state !== WebSocket.OPEN) {
				return toast({
					title: 'Error',
					description: 'Websocket is not connected. Please try again later.',
					variant: 'destructive',
					duration: 5000,
				});
			}
			const result = await search.mutateAsync(data);

			if (!result) {
				return toast({
					title: 'Error',
					description: `An error occurred while creating the search.`,
					variant: 'destructive',
					duration: 5000,
				});
			}

			toast({
				title: 'Search Created',
				description: result.message,
				variant: 'default',
				duration: 5000,
			});

			websocketInstance.socket?.emit('refresh');

			return router.push(`/social/${result.id}/view`);
		})(event);
	};

	return (
		<>
			<Head>
				<title>New Search</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="h-screen">
				<Toaster />
				<Header title="New Search" session={session.data} />
				<div className="container flex flex-col items-center justify-center p-6">
					<div className="flex w-full flex-row items-center">
						<ServerStatusBadge />
					</div>
					<form
						onSubmit={onSubmit}
						className="grid w-full grid-cols-1 gap-4 py-8 lg:grid-cols-5"
					>
						<Controller
							control={control}
							name="map"
							defaultValue={new mapboxgl.LngLat(-81.3, 42.97)}
							render={({ field: { onChange, value } }) => (
								<MapWithMarkerCard
									title="Map"
									description="Select a region to search."
									className="min-w-[300px] lg:col-span-3"
									value={{
										lng: value.lng || 0,
										lat: value.lat || 0,
									}}
									onChange={onChange}
								/>
							)}
						/>
						<Card className="lg:col-span-2">
							<CardHeader>
								<CardTitle>Search Parameters</CardTitle>
								<CardDescription>Edit the search parameters.</CardDescription>
							</CardHeader>
							<CardContent className="flex flex-col gap-4">
								<div className="flex flex-col gap-2">
									<Label htmlFor="name">Search Name</Label>
									<Input
										id="name"
										placeholder="Name"
										type="text"
										className="w-full"
										disabled={formState.isSubmitting}
										{...register('name', {
											required: true,
											disabled: formState.isSubmitting,
										})}
									/>
								</div>
								<div className="flex flex-col gap-2">
									<Label htmlFor="date">Date Range</Label>
									<Controller
										control={control}
										name="dateRange"
										rules={{ required: true }}
										defaultValue={{
											from: new Date(),
											to: addDays(new Date(), 2),
										}}
										render={({ field: { onChange, value } }) => (
											<CalendarDateRangePicker
												className="w-full"
												onChange={onChange}
												value={value as DateRange}
											/>
										)}
									/>
								</div>
								<div className="flex flex-col gap-2">
									<Label
										htmlFor="keywords"
										className="flex flex-row items-center gap-2"
									>
										<p>Keywords</p>
										<KeywordsInfo />
									</Label>
									<Controller
										control={control}
										name="keywords"
										defaultValue={[
											'storm',
											'tornado',
											'twister',
											'@weathernetwork',
											'@NTP_Reports',
											'funnel cloud',
											'tornado warning',
											'hurricane',
										]}
										rules={{ required: true, minLength: 1, maxLength: 100 }}
										render={({ field: { onChange, value, onBlur, ref } }) => {
											return (
												<KeywordInput
													onChange={onChange}
													value={value}
													onBlur={onBlur}
													inputRef={ref}
													disabled={formState.isSubmitting}
												/>
											);
										}}
									/>
								</div>
								<div className="flex flex-col gap-2">
									<Label
										htmlFor="range"
										className="flex flex-row items-center gap-2"
									>
										<p>Radius (km)</p>
										<RadiusInfo />
									</Label>
									<Input
										id="radius"
										placeholder="50"
										defaultValue={50}
										min="10"
										max="1000"
										step="10"
										type="number"
										className="w-full"
										disabled={formState.isSubmitting}
										{...register('radius', {
											required: true,
											valueAsNumber: true,
											disabled: formState.isSubmitting,
										})}
									/>
								</div>
								<div className="flex flex-col gap-2">
									<Label htmlFor="frequency">Frequency (min)</Label>
									<Input
										id="frequency"
										placeholder="30"
										defaultValue={30}
										min="0.1"
										max="1440"
										step="0.01"
										type="number"
										className="w-full"
										{...register('frequency', {
											required: true,
											valueAsNumber: true,
											disabled: formState.isSubmitting,
										})}
									/>
								</div>
								<div className="flex flex-col gap-2">
									<Label htmlFor="maxResults">Max Results</Label>
									<Input
										id="maxResults"
										placeholder="100"
										defaultValue={100}
										min="1"
										max="1000"
										step="1"
										type="number"
										className="w-full"
										disabled={formState.isSubmitting}
										{...register('maxResults', {
											required: true,
											valueAsNumber: true,
											disabled: formState.isSubmitting,
										})}
									/>
								</div>
								<div className="mb-2 flex h-12 flex-col gap-2">
									<Label>Toggle Platforms</Label>
									<div className="flex flex-row gap-2">
										<Controller
											control={control}
											name="facebook"
											defaultValue={false}
											render={({ field: { onChange, value, ref } }) => (
												<Toggle
													id="facebook"
													pressed={value}
													onPressedChange={onChange}
													ref={ref}
													variant="outline"
													aria-label="Toggle Facebook"
												>
													<LucideFacebook />
												</Toggle>
											)}
										/>
										<Separator orientation="vertical" />
										<Controller
											control={control}
											name="twitter"
											defaultValue={true}
											render={({ field: { onChange, value, ref } }) => (
												<Toggle
													id="twitter"
													pressed={value}
													onPressedChange={onChange}
													ref={ref}
													variant="outline"
													aria-label="Toggle Twitter"
												>
													<LucideTwitter />
												</Toggle>
											)}
										/>
									</div>
								</div>
							</CardContent>
							<CardFooter>
								<Button formAction="submit" disabled={formState.isSubmitting}>
									Submit
								</Button>
							</CardFooter>
						</Card>
					</form>
				</div>
			</main>
		</>
	);
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
	return await ntpProtectedRoute(context);
}

export default NewSearchPage;
