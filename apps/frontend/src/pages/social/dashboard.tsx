import { type GetServerSidePropsContext, type NextPage } from 'next';
import Head from 'next/head';
import ServerStatusBadge from '@/components/server-status-badge';
import Header from '@/components/header';
import { CalendarDateRangePicker } from '@/components/ui/calendar-range';
import { addDays } from 'date-fns';
import { Toaster } from '@/components/ui/toaster';
import { NewSearchButton } from '@/components/buttons/new-search-button';
import { ntpProtectedRoute } from '@/lib/protectedRoute';
import { useSession } from 'next-auth/react';
import { api } from '@/utils/api';
import { DataTable } from '@/components/data-tables/searches/data-table';
import { columns } from '@/components/data-tables/searches/columns';
import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from '@/components/ui/card';
import { SearchDashboardMapCard } from '@/components/maps';
import { Skeleton } from '@/components/ui/skeleton';

const Dashboard: NextPage = () => {
	const session = useSession();
	const searches = api.search.getAll.useQuery({}, {
		refetchOnWindowFocus: false,
	});

	return (
		<>
			<Head>
				<title>NTP Social</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="h-screen">
				<Header
					title={
						<p>
							NTP <span className="text-success">Social</span>
						</p>
					}
					session={session.data}
				/>
				<Toaster />
				<div className="container flex flex-col items-center justify-center p-6">
					<div className="flex w-full flex-row items-center gap-4">
						<NewSearchButton />
						<CalendarDateRangePicker
							value={{
								from: new Date(),
								to: addDays(new Date(), 7),
							}}
						/>
						<ServerStatusBadge />
					</div>
					<div className="grid w-full grid-cols-2 gap-4 py-8 lg:grid-cols-5">
						<Card className="col-span-full">
							<CardHeader>
								<CardTitle>Searches</CardTitle>
								<CardDescription>List of all searches.</CardDescription>
							</CardHeader>
							<CardContent>
								<DataTable columns={columns} data={searches.data ?? []} />
							</CardContent>
						</Card>
						{searches.data ? (
							<SearchDashboardMapCard
								title="Search Locations"
								description="Locations of all searches"
								className="col-span-full lg:col-span-3"
								points={
									searches.data?.map((search) => {
										return {
											lat: search.latitude,
											lng: search.longitude,
										};
									}) ?? []
								}
							/>
						) : (
							<Skeleton className="col-span-full h-96 lg:col-span-3" />
						)}
					</div>
				</div>
			</main>
		</>
	);
};

export default Dashboard;

export async function getServerSideProps(context: GetServerSidePropsContext) {
	return await ntpProtectedRoute(context);
}
