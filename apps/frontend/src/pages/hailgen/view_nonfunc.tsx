import Head from 'next/head';
import { NextPage } from 'next';
import Header from '@/components/header';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import { Toaster } from '@/components/ui/toaster';
import { api } from '@/utils/api';
import { useEffect, useRef, useState } from 'react';
import { HailpadDetails, HailpadMap, IndentDetails } from '@/components/hailgen-cards';
import { HailgenControls } from '@/components/dialogs/info-dialogs';
import { Button } from '@/components/ui/button';
import { FileSpreadsheet } from 'lucide-react';

const View: NextPage = () => {
    const session = useSession();
    const router = useRouter();

    const conversionFactor = 1639.34426 / 1000; // px/mm
    const [currentIndex, setCurrentIndex] = useState(0);
    const [centroids, setCentroids] = useState<Array<[number, number]>>([]);
    const [download, setDownload] = useState(false);

    const [scanData, setScanData] = useState<{
        indents: {
            area: number;
            major_axis: number;
            minor_axis: number;
            centroid: {
                y: number;
                x: number;
            };
            depth_at_centroid: number;
            avg_depth: number;
            max_depth: number;
        }[];
        img: string;
    }>({
        indents: [],
        img: '',
    });

    const [filters, setFilters] = useState<{
        minMinor: number;
        maxMinor: number;
        minMajor: number;
        maxMajor: number;
        minVolume: number;
        maxVolume: number;
    }>({
        minMinor: undefined,
        maxMinor: undefined,
        minMajor: undefined,
        maxMajor: undefined,
        minVolume: undefined,
        maxVolume: undefined,
    });

    // TODO: Replace with backend API call
    useEffect(() => {
        fetch('/output.json')
            .then(response => response.json())
            .then(data => {
                const newCentroids = data.indents.map(indent => [indent.centroid.y, indent.centroid.x]);
                setScanData(data);
                setCentroids(newCentroids);
            })
            .catch(error => console.error('Error fetching centroids: ', error));

        // Filter scanData indents and centroids (TODO: Volume filters)
        if (filters.minMinor) {
            setScanData(scanData => {
                const newIndents = [...scanData.indents];
                const filteredIndents = newIndents.filter(indent => indent.minor_axis >= filters.minMinor);
                console.log(filteredIndents); // TODO: Remove
                return { ...scanData, indents: filteredIndents };
            });
            setCentroids(centroids => centroids.filter((_, index) => scanData.indents[index].minor_axis >= filters.minMinor));
        }

        // TODO
        // if (filters.max_minor) {

        // }

        // if (filters.min_major) {

        // }

        // if (filters.max_major) {

        // }

        console.log(download);

        if (download) {
            setDownload(false);
            downloadCSV();
        }

    }, [filters.minMinor, filters.maxMinor, filters.minMajor, filters.maxMajor, filters.minVolume, filters.maxVolume, download]);

    // Download CSV of scanData indents
    const downloadCSV = () => {
        const headers = ['Area', 'Major Axis', 'Minor Axis', 'Centroid X', 'Centroid Y', 'Depth at Centroid', 'Average Depth', 'Max Depth'];
        const csvData = scanData.indents.map(indent => {
            return `${indent.area},${indent.major_axis},${indent.minor_axis},${indent.centroid.x},${indent.centroid.y},${indent.depth_at_centroid},${indent.avg_depth},${indent.max_depth}`;
        });
        csvData.unshift(headers.join(',')); // Add headers at the start of the array
        const csv = csvData.join('\n');

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'hailpad_data.csv';
        a.click();
    };

    return (
        <>
            <Head>
                <title>NHP Hailgen - View</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="h-screen">
                <Header
                    title={
                        <>
                            NHP <span className="text-success">Hailgen</span>
                        </>
                    }
                    session={session.data}
                />
                <Toaster />
                <div className="container flex flex-col items-center justify-center p-10">
                    <div className="mb-4 flex w-full flex-row items-center gap-4 text-left text-2xl font-medium">
                        <h2>{/*scan.data.name ||*/ 'Hailpad Scan Name'}</h2>
                        <HailgenControls />
                    </div>
                    <div className="grid w-full grid-cols-1 gap-4 lg:grid-cols-6 lg:grid-rows-3">
                        <div className="row-span-2 object-fit overflow-hidden rounded-md lg:col-span-4 border-[1px]" style={{ aspectRatio: '1/1', display: 'flex' }}>
                            <HailpadMap
                                index={currentIndex}
                                onIndexChange={setCurrentIndex}
                                imgData={scanData.img} centroids={centroids}
                            />
                        </div>
                        <div className="col-span-2 space-y-4">
                            <div className="row-span-2">
                                <HailpadDetails
                                    onFilterChange={setFilters}
                                    onDownload={() => setDownload(true)}
                                    indent_count={scanData.indents.length}
                                    min_minor={scanData.indents.reduce((min, indent) => Math.min(min, indent.minor_axis), Infinity) / conversionFactor}
                                    max_minor={scanData.indents.reduce((max, indent) => Math.max(max, indent.minor_axis), -Infinity) / conversionFactor}
                                    avg_minor={scanData.indents.reduce((sum, indent) => sum + indent.minor_axis, 0) / scanData.indents.length / conversionFactor}
                                    min_major={scanData.indents.reduce((min, indent) => Math.min(min, indent.major_axis), Infinity) / conversionFactor}
                                    max_major={scanData.indents.reduce((max, indent) => Math.max(max, indent.major_axis), -Infinity) / conversionFactor}
                                    avg_major={scanData.indents.reduce((sum, indent) => sum + indent.major_axis, 0) / scanData.indents.length / conversionFactor}
                                    min_volume={0}
                                    max_volume={0}
                                    avg_volume={0}
                                    minors={scanData.indents.map(indent => indent.minor_axis / conversionFactor)}
                                    majors={scanData.indents.map(indent => indent.major_axis / conversionFactor)}
                                    volumes={[0]}
                                />
                            </div>
                            <div className="className=row-span-1">
                                {scanData.indents[currentIndex] &&
                                    <IndentDetails
                                        onNext={() => {
                                            if (currentIndex + 1 < scanData.indents.length) {
                                                setCurrentIndex(currentIndex + 1);
                                            } else {
                                                setCurrentIndex(0);
                                            }
                                        }}
                                        onPrevious={() => {
                                            if (currentIndex - 1 >= 0) {
                                                setCurrentIndex(currentIndex - 1);
                                            } else {
                                                setCurrentIndex(scanData.indents.length - 1);
                                            }
                                        }}
                                        index={currentIndex}
                                        onIndexChange={setCurrentIndex}
                                        indent_count={scanData.indents.length}
                                        minor={scanData.indents[currentIndex].minor_axis / conversionFactor}
                                        major={scanData.indents[currentIndex].major_axis / conversionFactor}
                                        volume={0}
                                    />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
};

export default View;
